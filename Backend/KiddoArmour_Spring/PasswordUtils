//PasswordUtils to hash password and store it in database;


import org.mindrot.jbcrypt.BCrypt;

public class PasswordUtils {
    private static final int WORKLOAD = 12; // the higher the number, the more secure but slower the algorithm is

    public static String hashPassword(String plainTextPassword) {
        String hashedPassword = BCrypt.hashpw(plainTextPassword, BCrypt.gensalt(WORKLOAD));
        return hashedPassword;
    }

    public static boolean checkPassword(String plainTextPassword, String hashedPassword) {
        boolean passwordMatch = BCrypt.checkpw(plainTextPassword, hashedPassword);
        return passwordMatch;
    }
}


//Method to call above password hash from user pojo

@Column(length = 100)
    @Getter(AccessLevel.NONE) // exclude the password field from the getter method
    private String password;

    // other properties and methods

    public void setPassword(String password) {
        this.password = PasswordUtils.hashPassword(password);
    }
    
    
// If you need to check whether a password entered by a user matches the hashed password 
// stored in the database, you can use the PasswordUtils class's checkPassword() method in a 
// separate method within the User class, like this:

@Entity
public class User {
    // ...

    public boolean isPasswordCorrect(String password) {
        return PasswordUtils.checkPassword(password, this.password);
    }
}

// In this example, the isPasswordCorrect() method takes a plain text password as input, and uses the 
// PasswordUtils class's checkPassword() method to check if it matches the hashed password stored in 
// the password field of the User object. The method returns true if the password is correct, and false otherwise.

// With this approach, you can still provide password-related functionality without exposing the 
// plain text password to potential security risks.

